1/qf(1 - alpha, nx - 1, ny - 1)
#Ex.3
t1 = 250
n1 = 300
p1 = t1/n1
t2 = 135
n2 = 220
p2 = t2/n2
alpha = 0.01
p = (t1 + t2)/(n1 + n2)
z0 = (p1 - p2)/(sqrt((1-p)*p)*sqrt(1/n1 + 1/n2))
z0
qt(1-alpha, Inf)
#Ex 4
x=c(8.9, 9.5, 9.0, 9.4, 9.9, 8.7, 9.1, 9.1, 9.3, 8.9, 9.3)
y=c(9.6, 8.5, 8.9, 9.4, 9.5, 9.3, 8.4, 9.0, 9.7, 9.2, 9.0, 9.1, 8.9, 9.4)
n1 = length(x)
n2 = length(y)
alpha = 0.01
sd1 = sd(x)
sd2 = sd(y)
u1 = mean(x)
u2 = mean(y)
sd1
sd2
#Ex 4
x=c(8.9, 9.5, 9.0, 9.4, 9.9, 8.7, 9.1, 9.1, 9.3, 8.9, 9.3)
y=c(9.6, 8.5, 8.9, 9.4, 9.5, 9.3, 8.4, 9.0, 9.7, 9.2, 9.0, 9.1, 8.9, 9.4)
n1 = length(x)
n2 = length(y)
alpha = 0.01
sd1 = sd(x)
sd2 = sd(y)
u1 = mean(x)
u2 = mean(y)
sd1
sd2
t0 = (u1 - u2)/sqrt(sd1^2/n1 + sd2^2/n2)
t0
v = (sd1^2/n1 + sd2^2/n2)^2/((sd1^2/n1)^2/(n1 - 1) + (sd2^2/n2)^2/(n2-1))
qt(1 - alpha, v)
sd(x)
sd(y)
#Ex 5
x=c(4.6, 3.9, 4.3, 4.5, 4.4)
y=c(5.1, 4.6, 6.5, 4.1, 4.1, 3.9)
sd(x)
sd(y)
#Ex 5
x=c(4.6, 3.9, 4.3, 4.5, 4.4)
y=c(5.1, 4.6, 6.5, 4.1, 4.1, 3.9)
sd(x)
sd(y) #different sd
u1 = mean(x)
u2 = mean(y)
sd1 = sd(x)
sd2 = sd(y)
n1 = length(x)
n2 = length(y)
t0 = (u1 - u2)/sqrt(sd1^2/n1 + sd2^2/n2)
t0
v = (sd1^2/n1 + sd2^2/n2)^2/((sd1^2/n1)^2/(n1 - 1) + (sd2^2/n2)^2/(n2-1))
-qt(1 - alpha/2, v)
qt(1 - alpha/2, v)
alpha = 0.02
-qt(1 - alpha/2, v) #-3.73
qt(1 - alpha/2, v) #3.73
#Ex.6
n1 = 450
t1 = 310
p1 = t1/n1
n2 = 305
t2 = 231
p2 = t2/n2
alpha = 0.1
prop.test(c(t1,t2), c(n1, n2), alternative = "less", conf.level = 1-alpha)
sd(x)
sd(y)
#Ex 7
x=c(41, 40, 34, 62, 39, 54, 28)
y=c(30, 51, 46, 27, 31, 29, 35)
sd(x)
sd(y)
var(x)
var(y) #different sd
#Ex 7
x=c(41, 40, 34, 62, 39, 54, 28)
y=c(30, 51, 46, 27, 31, 29, 35)
var(x)
var(y) #different var
n1 = length(x)
n2 = length(y)
sd1 = sd(x)
sd2 = sd(y)
u1 = mean(x)
u2 = mean(y)
alpha = 0.1
t0 = (u1 - u2)/sqrt(sd1^2/n1 + sd2^2/n2)
t0 # -0.9
v = (sd1^2/n1 + sd2^2/n2)^2/((sd1^2/n1)^2/(n1 - 1) + (sd2^2/n2)^2/(n2-1))
-qt(1 - alpha/2, v)
qt(1 - alpha/2, v)
#1
w=c(4.07, 4.09, 4.06, 4.09, 4.08)
c=c(4.06,	4.08,	4.07,	4.07,	4.07)
g=c(4.08,	4.09,	4.08,	4.10,	4.09)
#a - homogeneity of the variance - Bartlett Test
values = c(w, c, g)
names = rep(c("w", "c", "g"), each = 5)
bartlett.test(values ~ names)
alpha = 0.5
a = aov(values ~ names)
summary(a)
#c
#H0: uw = ug      #H0: uc = ug
#H1: uw != ug     #H1: uc != ug
names = factor(names)
a = aov(values ~ names)
TukeyHSD(a)
#2
l=c(28,	26,	29,	30,	28,	31,	26,	32,	25,	29)
m=c(30, 29, 30, 30,	28,	32,	29,	32,	28,	30)
s=c(31,	29,	33,	33,	29,	33,	28,	32,	27,	32)
h=c(29,	27,	30,	31,	27,	32,	27,	32,	27, 30)
alpha = 0.05
#a - homogeonity of variance
values = c(l,m,s,h)
names = rep(c("l", "m", "s", "h"), each = length(l))
bartlett.test(values ~ names)
#b - equality of mean
#H0: m1 = m2 = m3 = m4
#H1: ~H0
a = aov(values ~ names)
summary(a)
#1
w=c(4.07, 4.09, 4.06, 4.09, 4.08)
c=c(4.06,	4.08,	4.07,	4.07,	4.07)
g=c(4.08,	4.09,	4.08,	4.10,	4.09)
alpha = 0.5
#H0: v1 = v2 = v3
#H1: ~H0
values = c(w, c, g)
names = rep(c("w", "c", "g"), each = 5)
bartlett.test(values ~ names)
#H0: m1 = m2 = m3
#H1: ~H0
a = aov(values ~ names)
summary(a)
#2
l=c(28,	26,	29,	30,	28,	31,	26,	32,	25,	29)
m=c(30, 29, 30, 30,	28,	32,	29,	32,	28,	30)
s=c(31,	29,	33,	33,	29,	33,	28,	32,	27,	32)
h=c(29,	27,	30,	31,	27,	32,	27,	32,	27, 30)
alpha = 0.05
#a - homogeneity of variance
#H0: v1 = v2 = v3 = v4
#H1: ~H0
values = c(l,m,s,h)
names = rep(c("l", "m", "s", "h"), each = length(l))
bartlett.test(values ~ names)
#b - equality of mean
#H0: m1 = m2 = m3 = m4
#H1: ~H0
a = aov(values ~ names)
summary(a)
#c - siginificant difference
#H0: l = h    #H1: s = h
#H1: l != h   #H1: s != h
names = factor(names)
a = aov(values ~ names)
TukeyHSD(a)
#a - homogeneity of variance
#H0: v1 = v2 = v3 = v4 = v5
values = c(m1, m2, m3, m4, m5)
names = rep(c("m1", "m2", "m3", "m4", "m5"), each = length(m1))
bartlett.test(values ~ names)
#3
m1=c(6.5, 7.8, 6.9, 6.4)
m2=c(7.2, 8.5, 7.3, 7.0)
m3=c(7.2, 7.5, 7.1, 7.5)
m4=c(7.1, 7.0, 7.1, 7.2)
m5=c(7.2, 6.6, 7.4, 7.5)
alpha = 0.05
#a - homogeneity of variance
#H0: v1 = v2 = v3 = v4 = v5
values = c(m1, m2, m3, m4, m5)
names = rep(c("m1", "m2", "m3", "m4", "m5"), each = length(m1))
bartlett.test(values ~ names)
#b - equality of mean
#H0: me1 = me2 = me3 = me4 = me5
a = aov(values ~ names)
summary(a)
#c - signifficant difference
#H0: m1 = m5    m2 = m5
#H1: m1 != m5   m2 != m5
names = factor(names)
a = aov(values ~ names)
TukeyHSD(a)
#4
non=c(69, 52, 71, 58, 59, 65)
sli=c(91, 72, 81, 67, 95, 84)
med=c(55, 60, 78, 58, 62, 66)
much=c(66, 81, 70, 77, 57, 79)
alpha = 0.05
#a - homogeneity of the variance
#H0: v1 = v2 = v3 = v4
values = c(non, sli, med, much)
names = rep(c("non","sli", "med", "much"), each = length(non))
bartlett.test(values ~ names)
#b - equality of the mean
#H0: m1 = m2 = m3 = m4 = m5
a = aov(values ~ names)
summary(a)
#1
x=c(8, 12, 15, 20, 22, 31)
y=c(74, 129, 182, 220, 260, 410)
#a
plot(x,y)
#b
Sxy = cov(x,y)/(sd(x)*sd(y))
Sxy
#c
#y = b1 * x + b0
b1 = Sxy/Sx #linear regression coefficient
#c
#y = b1 * x + b0
b1 = cov(x,y)/var(x) #linear regression coefficient
b0 = mean(y) - b1*mean(x)
b1
b2
b0
summary(lm(y~x))
#Ex 1
x=c(10.1, 11.5, 10.5, 11.2, 10.9, 11.3)
u0 = 11
sd_x = 05
alpha = 0.01
n = length(x)
#H0: u = u0
#H1: u =/= u0
#test for the mean, sigma known
z0 = (mean(x) - u0)/sd_x * sqrt(n)
z0
-qnorm(1 - alpha/2)
qnorm(1 - alpha/2)
#a
values = c(dhl, ups, fedex)
names = rep(c("dhl", "ups", "fedex"), each=length(dhl))
#Ex 2
dhl=c(0.8, 1, 1.1, 0.7, 0.8)
ups=c(0.9, 1.2, 1.1, 0.8, 1.1)
fedex=c(1.1, 1, 1.1, 1.4, 1.5)
alpha = 0.05
#a
values = c(dhl, ups, fedex)
names = rep(c("dhl", "ups", "fedex"), each=length(dhl))
bartlett.test(values ~ names)
#b
summary(aov(values ~ names))
#c
TukeyHSD(aov(values ~ nammes))
#c
TukeyHSD(aov(values ~ names))
#Ex 3
x=c(0, 8, 15, 20, 27, 30)
y=c(150, 183, 219, 211, 186, 172)
#a
plot(x,y)
#b
summary(ln(y ~ x + I(x^2)))
#b
summary(lm(y ~ x + I(x^2)))
#just checking
curve(-0.23043*x^2 + 7.77116 * x + 146.33566, add = TRUE)
#Ex 4
f=c(8,23,17,14,8)
x_dot = c(25, 35, 45, 55, 65)
n = length(f)
alpha = 0.05
mean_f = sum(x_dot*f)/n
sd_f = sqrt((1/(n-1)) * (sum(x_dot * f)) - n * mean_f ^ 2)
sd_f = sqrt((1/(n-1)) * (sum(x_dot * f) - n * mean_f ^ 2))
#Ex 4
f=c(8,23,17,14,8)
x_dot = c(25, 35, 45, 55, 65)
n = 70
alpha = 0.05
mean_f = sum(x_dot*f)/n
sd_f = sqrt((1/(n-1)) * (sum(x_dot * f) - n * mean_f ^ 2))
mean_f
(1/(n-1))
sum(x_dot * f)
n * mean_f ^ 2
pom1 =  (1/(n-1))
pom2 = sum(x_dot * f)
pom3 = n * mean_f ^ 2
var_f = pom1 * (pom2 - pom3)
var_f
pom1 =  (1/(n-1))
pom2 = sum(x_dot ^ 2 * f)
pom3 = n * mean_f ^ 2
var_f = pom1 * (pom2 - pom3)
var_f
sd_f = sqrt((1/(n-1)) * (sum(x_dot ^ 2 * f) - n * mean_f ^ 2))
mean_f
sqrt(var_f)
sd_f = sqrt((1/(n-1)) * (sum(x_dot ^ 2 * f) - n * mean_f ^ 2))
a1 = pnorm(25, mean_f, sd_f)
a2 = pnorm(35, mean_f, sd_f) - pnorm(25, mean_f, sd_f)
a3 = pnorm(45, mean_f, sd_f) - pnorm(35, mean_f, sd_f)
a4 = pnorm(55, mean_f, sd_f) - pnorm(45, mean_f, sd_f)
a5 = 1 - pnorm(65, mean_f, sd_f)
a = c(a1, a2, a3, a4, a5)
chisq.test(f, p = a)
a5 = 1 - pnorm(55, mean_f, sd_f)
a = c(a1, a2, a3, a4, a5)
chisq.test(f, p = a)
#Ex 5
m1=c(5.1, 5.3, 5.8, 5.6, 5.5)
m2=c(4.8, 5.8, 5.6, 4.7, 6.2, 5.7)
alpha = 0.1
f0 = var(m1)/var(m2)
1/qf(1 - alpha, length(n2) - 1, length(n1) - 1)
f0
qf(1 - alpha, length(n2) - 1, length(n1) - 1)
qf(1 - alpha, length(m2) - 1, length(m1) - 1)
1/qf(1 - alpha, length(m2) - 1, length(m1) - 1) #
1
#we reject H0 in favor of H1 - the variance of the weight of element
#b
summary(lm(y ~ x + I(x^2)))
#Ex 3
x=c(0, 8, 15, 20, 27, 30)
y=c(150, 183, 219, 211, 186, 172)
alpha = 0.05
#a
plot(x,y) #probably the data might be described by curvlinear regression model
#b
summary(lm(y ~ x + I(x^2)))
#c
#H0: b2 = 0
#H1: b2 =/= 0
r = cor(x,y)
#Ex 3
x=c(0, 8, 15, 20, 27, 30)
y=c(150, 183, 219, 211, 186, 172)
alpha = 0.05
#a
plot(x,y) #probably the data might be described by curvlinear regression model
#b
summary(lm(y ~ x + I(x^2)))
#c
#H0: b2 = 0
#H1: b2 =/= 0
r = cor(x,y)
n = length(x)
t0 = r * sqrt(n - 2)/sqrt(1 - r^2)
t0
-qt(1 - alpha/2, n-2)
qt(1 - alpha/2, n-1)
years = seq(2009, 2027, 1)
percent = c(4.8, 4.7, 4.5, 4.4, 4.6, 4.4, 4.4, 4.5, 4.5, 4.5, 4.6, 5.0, 5.2, 5.3, 5.6, 6.0, 6.2, 6.5, 6.7, 7.0)
years = seq(2009, 2027, 1)
years = seq(2009, 2028, 1)
plot(years, percent)
hist(years, percent)
barplot(percent)
barplot(percent, names.arg = years)
barplot(percent, names.arg = years, ylab = "Percent of the GBP")
barplot(percent, names.arg = years, ylab = "Percent of the GBP", main = "Expenses for the health service as the % of the GBP")
barplot(percent, names.arg = years, ylab = "Percent of the GBP", main = "Expenses for the health service as the % of the GBP", col = rainbow(3))
barplot(percent, names.arg = years, ylab = "Percent of the GBP", main = "Expenses for the health service as the % of the GBP", col = c("green", "green", "blue")
grid(nx = NA, ny = NULL, lwd = 1, lty = 1, col = "gray")
barplot(percent, names.arg = years, ylab = "Percent of the GBP", main = "Expenses for the health service as the % of the GBP", col = c("green", "green", "blue"))
percent = c(4.8, 4.7, 4.5, 4.4, 4.6, 4.4, 4.4, 4.5, 4.5, 4.5, 4.6, 5.0, 5.3, 5.6, 6.0, 6.2, 6.5, 6.7, 7.0)
years = seq(2009, 2027, 1)
col_po = rep(c("blue"),7)
col_pis = rep(c("green"),7)
col_pre = rep(c("gray"),5)
color = col_po + col_pis + col_pre
barplot(percent, names.arg = years, ylab = "Percent of the GBP", main = "Expenses for the health service as the % of the GBP", col = color)
col_all = c(col_po, col_pis, col_pre)
barplot(percent, names.arg = years, ylab = "Percent of the GBP", main = "Expenses for the health service as the % of the GBP", col = col_all)
grid(nx = NA, ny = NULL, lwd = 1, lty = 1, col = "gray")
plot()
plot(years)
barplot(percent, names.arg = years, ylab = "Percent of the GBP", main = "Expenses for the health service as the % of the GBP", col = col_all)
source("D:/Polibuda/Semestr 4/Data Visualisation/Assignement 1.R")
library(ggplot2)
df <- diamonds
df <- airquality
ggplot(df, aes(x = Temp, y = Ozone, color = Month))
ggplot(df, aes(x = Temp, y = Ozone, color = Month)) + geom_point()
ggplot(df, aes(x = Temp, y = Ozone, color = Month)) + geom_point()
source("~/.active-rstudio-document")
?geom_point
ggplot(df, aes(x = Temp, y = Ozone, color = Month)) + geom_point()
ggplot(df, aes(x = Temp, y = Ozone, color = factor(Month))) + geom_bar(stat = "identity", position = "identity")
ggplot(df, aes(x = Temp, y = Ozone, fill = factor(Month))) + geom_bar(stat = "identity", position = "identity")
ggplot(df, aes(x = Temp, y = Ozone, color = Month)) + geom_point() + geom_smooth()
ggplot(df, aes(x = Temp, y = Ozone, color = factor(Month)) + geom_point() + geom_smooth()
ggplot(df, aes(x = Temp, y = Ozone, color = factor(Month))) + geom_point() + geom_smooth()
ggplot(df, aes(x = Temp, y = Ozone, color = factor(Month)) + geom_point() + geom_smooth()
ggplot(df, aes(x = Temp, y = Ozone, color = factor(Month)) + geom_point() + geom_smooth()
ggplot(df, aes(x = Temp, y = Ozone, color = factor(Month)) + geom_point() + geom_smooth()
fac
ggplot(df, aes(x = Temp, y = Ozone )) + geom_point() + geom_smooth(method = "lm") + facet_grid(.~Month)
ggplot(df, aes(x = Temp, y = Ozone, color = factor(Month) )) + geom_point() + geom_smooth(method = "lm") + facet_grid(.~Month)
ggplot(df, aes(x = Temp, y = Ozone, color = factor(Month) )) + geom_point() + geom_smooth(method = "lm") + facet_grid(Day~Month)
ggplot(df, aes(x = Temp, y = Ozone, color = factor(Month) )) + geom_point() + geom_smooth(method = "lm") + facet_grid(Day~Month, scales = "free")
ggplot(df, aes(x = Temp, fill = factor(Month) )) + geom_histogram()
ggplot(df, aes(x = Temp, fill = factor(Month) )) + geom_density()
ggplot(df, aes(x = Temp, fill = factor(Month) )) + geom_density(alpha = 0.25)
ggplot(df, aes(x = Temp, color = factor(Month) )) + geom_density(alpha = 0.25)
ggplot(df, aes(x = Temp, color = factor(Month), fill = factor(Month) )) + geom_density(alpha = 0.25)
ggplot(df, aes(x = Temp, color = factor(Month), fill = factor(Month), alpha = 0.25 )) + geom_density()
ggplot(df, aes(x = Temp, color = factor(Month), fill = factor(Month) )) + geom_density(alpha = 0.25) + theme_bw()
ggplot(df, aes(x = Temp, color = factor(Month), fill = factor(Month) )) + geom_density(alpha = 0.25) + theme_dark()
ggplot(df, aes(x = Temp, color = factor(Month), fill = factor(Month) )) + geom_density(alpha = 0.25) + theme_void()
ggplot(df, aes(x = Temp, color = factor(Month), fill = factor(Month) )) + geom_density(alpha = 0.25) + theme_classic()
ggplot(df, aes(x = Temp, color = factor(Month), fill = factor(Month) )) + geom_density(alpha = 0.25) + theme_minimal()
ggplot(df, aes(x = Temp, color = factor(Month), fill = factor(Month) )) + geom_density(alpha = 0.25) + theme_minimal() + coord_flip()
ggplot(df, aes(x = Temp, color = factor(Month), fill = factor(Month) )) + geom_density(alpha = 0.25) + theme_minimal() + coord_polar()
ggplot(df, aes(x = Temp, color = factor(Month), fill = factor(Month) )) + geom_density(alpha = 0.25) + theme_minimal() + coord_polar() + scale_fill_brewer(palette = "Paired")
library(ggplot2)
df <- data.frame(averageIQ = x)
# set.seed(23)
x<-rnorm(sampleSize)
mean(x)
---
title: "Lecture"
author: "Bogna Kilanowska"
date: "4/4/2022"
output:
html_document:
toc: yes
highlight: kate
theme: cosmo
word_document: default
pdf_document: default
---
# Lotery
## Sampling
```{r variables}
sampleSize <- 100
```
I will randomly sample `r sampleSize` numbers and calculate their mean.
<!-- Alt+Ctrl+I -->
<!-- Ctrl+Shift+C -->
<!-- Ctrl+Shift+K -->
```{r sampling, echo=F, results = 'hide'}
# set.seed(23)
x<-rnorm(sampleSize)
mean(x)
```{r sampling, echo=F, results = 'hide'}
```{r}
df <- data.frame(averageIQ = x)
df <- data.frame(averageIQ = x)
p <- ggplot(df, aes(x = avergeIQ)) +
geom_histogram(fill = "blue")
data = c(96.066, 96.2667, 94.4667, 95.6667, 96.1333)
sd(data)
data2 = c(98.6667, 94.6667, 98, 96, 94.6667)
mean(data2)
sd(data2)
leaves = c(312, 152, 133, 50, 33, 4, 2, 1)
min_ob = c(1, 2, 3, 5, 10, 20, 50, 100)
plot(min_ob, leaves)
size = c(372, 179, 158, 60, 39, 6, 3, 1)
size_t = c(372, 179, 158, 60, 39, 6, 3, 1)
plot(min_ob, size_t)
setwd("D:/Polibuda/Semestr 4/Algorithms & Data Structures/02 Dynamic Data Structures/Data_1")
append <- ex4_all[c(seq(1,351,3)),c(1,2,4)]
search <- ex4_all[c(seq(2,351,3)),c(1,2,4)]
delete <- ex4_all[c(seq(3,351,3)),c(1,2,4)]
ggplot(data = search, aes(x = no_elements, y = time, color = factor(data_structure))) + geom_line() + ggtitle("Average search time: BBST vs. BST vs. OL") +
theme(legend.text = element_text(size = 14), legend.title = element_text(size = 12)) + theme_gray(base_size = 18)
library(ggplot2)
library(dplyr)
ggplot(data = search, aes(x = no_elements, y = time, color = factor(data_structure))) + geom_line() + ggtitle("Average search time: BBST vs. BST vs. OL") +
theme(legend.text = element_text(size = 14), legend.title = element_text(size = 12)) + theme_gray(base_size = 18)
ex4_rand <- read.csv("ol.csv", dec = ".", head = TRUE, sep = ",")
ggplot(data = ex4_rand, aes(x = no_elements, y = time, color = factor(operation))) + geom_line() + ggtitle("Random") +
theme(legend.text = element_text(size = 14), legend.title = element_text(size = 12)) + theme_gray(base_size = 18)
ex4_bst <- read.csv("bst.csv", dec = ".", head = TRUE, sep = ",")
ggplot(data = ex4_bst, aes(x = X0, y = X0.1, color = factor(append))) + geom_line() + ggtitle("Random") +
theme(legend.text = element_text(size = 14), legend.title = element_text(size = 12)) + theme_gray(base_size = 18)
ex4_bbst <- read.csv("bbst.csv", dec = ".", head = TRUE, sep = ",")
ggplot(data = ex4_bbst, aes(x = X0, y = X0.1, color = factor(append))) + geom_line() + ggtitle("Random") +
theme(legend.text = element_text(size = 14), legend.title = element_text(size = 12)) + theme_gray(base_size = 18)
ex4_all <- read.csv("colective.csv", dec = ".", head = TRUE, sep = ",")
ggplot(data = ex4_all, aes(x = no_elements, y = time, )) + geom_line() + ggtitle("Random") +
theme(legend.text = element_text(size = 14), legend.title = element_text(size = 12)) + theme_gray(base_size = 18)
append <- ex4_all[c(seq(1,351,3)),c(1,2,4)]
search <- ex4_all[c(seq(2,351,3)),c(1,2,4)]
delete <- ex4_all[c(seq(3,351,3)),c(1,2,4)]
ggplot(data = append, aes(x = no_elements, y = time, color = factor(data_structure))) + geom_line() + ggtitle("Average insertion time: BBST vs. BST vs. OL") +
theme(legend.text = element_text(size = 14), legend.title = element_text(size = 12)) + theme_gray(base_size = 18)
ggplot(data = search, aes(x = no_elements, y = time, color = factor(data_structure))) + geom_line() + ggtitle("Average search time: BBST vs. BST vs. OL") +
theme(legend.text = element_text(size = 14), legend.title = element_text(size = 12)) + theme_gray(base_size = 18)
ggplot(data = delete, aes(x = no_elements, y = time, color = factor(data_structure))) + geom_line() + ggtitle("Average time of deleting the whole structure: BBST vs. BST vs. OL") +
theme(legend.text = element_text(size = 14), legend.title = element_text(size = 12)) + theme_gray(base_size = 18)
delete %>%
filter(data_structure != "OL") %>%
ggplot(aes(x = no_elements, y = time, color = factor(data_structure))) + geom_line() + ggtitle("Average time of deleting the whole structure: BBST vs. BST") +
theme(legend.text = element_text(size = 14), legend.title = element_text(size = 12)) + theme_gray(base_size = 18)
ggplot(data = delete, aes(x = no_elements, y = time, color = factor(data_structure))) + geom_line() + ggtitle("Average delete time: BBST vs. BST vs. OL") +
theme(legend.text = element_text(size = 14), legend.title = element_text(size = 12)) + theme_gray(base_size = 18)
delete %>%
filter(data_structure != "OL") %>%
ggplot(aes(x = no_elements, y = time, color = factor(data_structure))) + geom_line() + ggtitle("Average delete time: BBST vs. BST") +
theme(legend.text = element_text(size = 14), legend.title = element_text(size = 12)) + theme_gray(base_size = 18)
