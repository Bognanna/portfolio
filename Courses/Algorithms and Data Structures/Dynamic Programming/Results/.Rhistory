u0 = 11
sd_x = 05
alpha = 0.01
n = length(x)
#H0: u = u0
#H1: u =/= u0
#test for the mean, sigma known
z0 = (mean(x) - u0)/sd_x * sqrt(n)
z0
-qnorm(1 - alpha/2)
qnorm(1 - alpha/2)
#a
values = c(dhl, ups, fedex)
names = rep(c("dhl", "ups", "fedex"), each=length(dhl))
#Ex 2
dhl=c(0.8, 1, 1.1, 0.7, 0.8)
ups=c(0.9, 1.2, 1.1, 0.8, 1.1)
fedex=c(1.1, 1, 1.1, 1.4, 1.5)
alpha = 0.05
#a
values = c(dhl, ups, fedex)
names = rep(c("dhl", "ups", "fedex"), each=length(dhl))
bartlett.test(values ~ names)
#b
summary(aov(values ~ names))
#c
TukeyHSD(aov(values ~ nammes))
#c
TukeyHSD(aov(values ~ names))
#Ex 3
x=c(0, 8, 15, 20, 27, 30)
y=c(150, 183, 219, 211, 186, 172)
#a
plot(x,y)
#b
summary(ln(y ~ x + I(x^2)))
#b
summary(lm(y ~ x + I(x^2)))
#just checking
curve(-0.23043*x^2 + 7.77116 * x + 146.33566, add = TRUE)
#Ex 4
f=c(8,23,17,14,8)
x_dot = c(25, 35, 45, 55, 65)
n = length(f)
alpha = 0.05
mean_f = sum(x_dot*f)/n
sd_f = sqrt((1/(n-1)) * (sum(x_dot * f)) - n * mean_f ^ 2)
sd_f = sqrt((1/(n-1)) * (sum(x_dot * f) - n * mean_f ^ 2))
#Ex 4
f=c(8,23,17,14,8)
x_dot = c(25, 35, 45, 55, 65)
n = 70
alpha = 0.05
mean_f = sum(x_dot*f)/n
sd_f = sqrt((1/(n-1)) * (sum(x_dot * f) - n * mean_f ^ 2))
mean_f
(1/(n-1))
sum(x_dot * f)
n * mean_f ^ 2
pom1 =  (1/(n-1))
pom2 = sum(x_dot * f)
pom3 = n * mean_f ^ 2
var_f = pom1 * (pom2 - pom3)
var_f
pom1 =  (1/(n-1))
pom2 = sum(x_dot ^ 2 * f)
pom3 = n * mean_f ^ 2
var_f = pom1 * (pom2 - pom3)
var_f
sd_f = sqrt((1/(n-1)) * (sum(x_dot ^ 2 * f) - n * mean_f ^ 2))
mean_f
sqrt(var_f)
sd_f = sqrt((1/(n-1)) * (sum(x_dot ^ 2 * f) - n * mean_f ^ 2))
a1 = pnorm(25, mean_f, sd_f)
a2 = pnorm(35, mean_f, sd_f) - pnorm(25, mean_f, sd_f)
a3 = pnorm(45, mean_f, sd_f) - pnorm(35, mean_f, sd_f)
a4 = pnorm(55, mean_f, sd_f) - pnorm(45, mean_f, sd_f)
a5 = 1 - pnorm(65, mean_f, sd_f)
a = c(a1, a2, a3, a4, a5)
chisq.test(f, p = a)
a5 = 1 - pnorm(55, mean_f, sd_f)
a = c(a1, a2, a3, a4, a5)
chisq.test(f, p = a)
#Ex 5
m1=c(5.1, 5.3, 5.8, 5.6, 5.5)
m2=c(4.8, 5.8, 5.6, 4.7, 6.2, 5.7)
alpha = 0.1
f0 = var(m1)/var(m2)
1/qf(1 - alpha, length(n2) - 1, length(n1) - 1)
f0
qf(1 - alpha, length(n2) - 1, length(n1) - 1)
qf(1 - alpha, length(m2) - 1, length(m1) - 1)
1/qf(1 - alpha, length(m2) - 1, length(m1) - 1) #
1
#we reject H0 in favor of H1 - the variance of the weight of element
#b
summary(lm(y ~ x + I(x^2)))
#Ex 3
x=c(0, 8, 15, 20, 27, 30)
y=c(150, 183, 219, 211, 186, 172)
alpha = 0.05
#a
plot(x,y) #probably the data might be described by curvlinear regression model
#b
summary(lm(y ~ x + I(x^2)))
#c
#H0: b2 = 0
#H1: b2 =/= 0
r = cor(x,y)
#Ex 3
x=c(0, 8, 15, 20, 27, 30)
y=c(150, 183, 219, 211, 186, 172)
alpha = 0.05
#a
plot(x,y) #probably the data might be described by curvlinear regression model
#b
summary(lm(y ~ x + I(x^2)))
#c
#H0: b2 = 0
#H1: b2 =/= 0
r = cor(x,y)
n = length(x)
t0 = r * sqrt(n - 2)/sqrt(1 - r^2)
t0
-qt(1 - alpha/2, n-2)
qt(1 - alpha/2, n-1)
years = seq(2009, 2027, 1)
percent = c(4.8, 4.7, 4.5, 4.4, 4.6, 4.4, 4.4, 4.5, 4.5, 4.5, 4.6, 5.0, 5.2, 5.3, 5.6, 6.0, 6.2, 6.5, 6.7, 7.0)
years = seq(2009, 2027, 1)
years = seq(2009, 2028, 1)
plot(years, percent)
hist(years, percent)
barplot(percent)
barplot(percent, names.arg = years)
barplot(percent, names.arg = years, ylab = "Percent of the GBP")
barplot(percent, names.arg = years, ylab = "Percent of the GBP", main = "Expenses for the health service as the % of the GBP")
barplot(percent, names.arg = years, ylab = "Percent of the GBP", main = "Expenses for the health service as the % of the GBP", col = rainbow(3))
barplot(percent, names.arg = years, ylab = "Percent of the GBP", main = "Expenses for the health service as the % of the GBP", col = c("green", "green", "blue")
grid(nx = NA, ny = NULL, lwd = 1, lty = 1, col = "gray")
barplot(percent, names.arg = years, ylab = "Percent of the GBP", main = "Expenses for the health service as the % of the GBP", col = c("green", "green", "blue"))
percent = c(4.8, 4.7, 4.5, 4.4, 4.6, 4.4, 4.4, 4.5, 4.5, 4.5, 4.6, 5.0, 5.3, 5.6, 6.0, 6.2, 6.5, 6.7, 7.0)
years = seq(2009, 2027, 1)
col_po = rep(c("blue"),7)
col_pis = rep(c("green"),7)
col_pre = rep(c("gray"),5)
color = col_po + col_pis + col_pre
barplot(percent, names.arg = years, ylab = "Percent of the GBP", main = "Expenses for the health service as the % of the GBP", col = color)
col_all = c(col_po, col_pis, col_pre)
barplot(percent, names.arg = years, ylab = "Percent of the GBP", main = "Expenses for the health service as the % of the GBP", col = col_all)
grid(nx = NA, ny = NULL, lwd = 1, lty = 1, col = "gray")
plot()
plot(years)
barplot(percent, names.arg = years, ylab = "Percent of the GBP", main = "Expenses for the health service as the % of the GBP", col = col_all)
source("D:/Polibuda/Semestr 4/Data Visualisation/Assignement 1.R")
library(ggplot2)
df <- diamonds
df <- airquality
ggplot(df, aes(x = Temp, y = Ozone, color = Month))
ggplot(df, aes(x = Temp, y = Ozone, color = Month)) + geom_point()
ggplot(df, aes(x = Temp, y = Ozone, color = Month)) + geom_point()
source("~/.active-rstudio-document")
?geom_point
ggplot(df, aes(x = Temp, y = Ozone, color = Month)) + geom_point()
ggplot(df, aes(x = Temp, y = Ozone, color = factor(Month))) + geom_bar(stat = "identity", position = "identity")
ggplot(df, aes(x = Temp, y = Ozone, fill = factor(Month))) + geom_bar(stat = "identity", position = "identity")
ggplot(df, aes(x = Temp, y = Ozone, color = Month)) + geom_point() + geom_smooth()
ggplot(df, aes(x = Temp, y = Ozone, color = factor(Month)) + geom_point() + geom_smooth()
ggplot(df, aes(x = Temp, y = Ozone, color = factor(Month))) + geom_point() + geom_smooth()
ggplot(df, aes(x = Temp, y = Ozone, color = factor(Month)) + geom_point() + geom_smooth()
ggplot(df, aes(x = Temp, y = Ozone, color = factor(Month)) + geom_point() + geom_smooth()
ggplot(df, aes(x = Temp, y = Ozone, color = factor(Month)) + geom_point() + geom_smooth()
fac
ggplot(df, aes(x = Temp, y = Ozone )) + geom_point() + geom_smooth(method = "lm") + facet_grid(.~Month)
ggplot(df, aes(x = Temp, y = Ozone, color = factor(Month) )) + geom_point() + geom_smooth(method = "lm") + facet_grid(.~Month)
ggplot(df, aes(x = Temp, y = Ozone, color = factor(Month) )) + geom_point() + geom_smooth(method = "lm") + facet_grid(Day~Month)
ggplot(df, aes(x = Temp, y = Ozone, color = factor(Month) )) + geom_point() + geom_smooth(method = "lm") + facet_grid(Day~Month, scales = "free")
ggplot(df, aes(x = Temp, fill = factor(Month) )) + geom_histogram()
ggplot(df, aes(x = Temp, fill = factor(Month) )) + geom_density()
ggplot(df, aes(x = Temp, fill = factor(Month) )) + geom_density(alpha = 0.25)
ggplot(df, aes(x = Temp, color = factor(Month) )) + geom_density(alpha = 0.25)
ggplot(df, aes(x = Temp, color = factor(Month), fill = factor(Month) )) + geom_density(alpha = 0.25)
ggplot(df, aes(x = Temp, color = factor(Month), fill = factor(Month), alpha = 0.25 )) + geom_density()
ggplot(df, aes(x = Temp, color = factor(Month), fill = factor(Month) )) + geom_density(alpha = 0.25) + theme_bw()
ggplot(df, aes(x = Temp, color = factor(Month), fill = factor(Month) )) + geom_density(alpha = 0.25) + theme_dark()
ggplot(df, aes(x = Temp, color = factor(Month), fill = factor(Month) )) + geom_density(alpha = 0.25) + theme_void()
ggplot(df, aes(x = Temp, color = factor(Month), fill = factor(Month) )) + geom_density(alpha = 0.25) + theme_classic()
ggplot(df, aes(x = Temp, color = factor(Month), fill = factor(Month) )) + geom_density(alpha = 0.25) + theme_minimal()
ggplot(df, aes(x = Temp, color = factor(Month), fill = factor(Month) )) + geom_density(alpha = 0.25) + theme_minimal() + coord_flip()
ggplot(df, aes(x = Temp, color = factor(Month), fill = factor(Month) )) + geom_density(alpha = 0.25) + theme_minimal() + coord_polar()
ggplot(df, aes(x = Temp, color = factor(Month), fill = factor(Month) )) + geom_density(alpha = 0.25) + theme_minimal() + coord_polar() + scale_fill_brewer(palette = "Paired")
library(ggplot2)
df <- data.frame(averageIQ = x)
# set.seed(23)
x<-rnorm(sampleSize)
mean(x)
---
title: "Lecture"
author: "Bogna Kilanowska"
date: "4/4/2022"
output:
html_document:
toc: yes
highlight: kate
theme: cosmo
word_document: default
pdf_document: default
---
# Lotery
## Sampling
```{r variables}
sampleSize <- 100
```
I will randomly sample `r sampleSize` numbers and calculate their mean.
<!-- Alt+Ctrl+I -->
<!-- Ctrl+Shift+C -->
<!-- Ctrl+Shift+K -->
```{r sampling, echo=F, results = 'hide'}
# set.seed(23)
x<-rnorm(sampleSize)
mean(x)
```{r sampling, echo=F, results = 'hide'}
```{r}
df <- data.frame(averageIQ = x)
df <- data.frame(averageIQ = x)
p <- ggplot(df, aes(x = avergeIQ)) +
geom_histogram(fill = "blue")
data = c(96.066, 96.2667, 94.4667, 95.6667, 96.1333)
sd(data)
data2 = c(98.6667, 94.6667, 98, 96, 94.6667)
mean(data2)
sd(data2)
leaves = c(312, 152, 133, 50, 33, 4, 2, 1)
min_ob = c(1, 2, 3, 5, 10, 20, 50, 100)
plot(min_ob, leaves)
size = c(372, 179, 158, 60, 39, 6, 3, 1)
size_t = c(372, 179, 158, 60, 39, 6, 3, 1)
plot(min_ob, size_t)
library(showtext)
library(ggplot2)
library(dplyr)
library(tidyr)
library(png)
library(grid)
library(gganimate)
library(gifski)
library(scales)
library(plotly)
font_add_google("Montserrat")
showtext_auto()
pp_blue = "#006288"
gold <- read.csv("https://raw.githubusercontent.com/senketsutsu/study_stuff/main/Gold%20prices.csv")
exchange <- read.csv("https://raw.githubusercontent.com/senketsutsu/study_stuff/main/CurrencyExchangeRates.csv")
big <- read.csv("https://raw.githubusercontent.com/senketsutsu/study_stuff/main/World_Development_Indicators.xlsx%20-%20Data.csv")
bh_diff <- read.csv("https://raw.githubusercontent.com/senketsutsu/study_stuff/main/Bitcoin/BCHAIN-DIFF.csv")
bh_hrate <- read.csv("https://raw.githubusercontent.com/senketsutsu/study_stuff/main/Bitcoin/BCHAIN-HRATE.csv")
bh_mkpru <- read.csv("https://raw.githubusercontent.com/senketsutsu/study_stuff/main/Bitcoin/BCHAIN-MKPRU.csv")
bh_trvou <- read.csv("https://raw.githubusercontent.com/senketsutsu/study_stuff/main/Bitcoin/BCHAIN-TRVOU.csv")
tidy_gold <- gold %>%
gather("currency", "value", 2:7)
tidy_gold$Date <- as.Date(tidy_gold$Date, '%Y-%m-%d')
x_from = as.Date('2000-01-01', '%Y-%m-%d')
x_from2 = as.Date('2017-01-01', '%Y-%m-%d')
x_to = as.Date('2021-09-01', '%Y-%m-%d')
x_to2 = as.Date('2015-01-01', '%Y-%m-%d')
tidy_gold %>%
filter(currency != "USD..PM." & currency != "GBP..PM." & currency != "EURO..PM.") %>%
ggplot(aes(x = Date, y=value, group = currency)) + geom_line(aes(col=factor(currency))) +
coord_cartesian(xlim=c(x_from,x_to)) +
ggtitle("Gold Prices", subtitle="2000 - 2021") + xlab("Year") + ylab("Value") +
scale_y_continuous(breaks=seq(0, 2100, 500), labels = function(x){paste0(x/1000, 'K')}) +
scale_color_manual(name="",
labels = c("Euro",
"Funt",
"Dollar"),
values = c("#2980b9",
"#7fb3d5",
"#839192")) +
theme_bw() +
theme(legend.position="bottom", legend.box = "horizontal") +
theme(plot.title = element_text(size = 30,
family = "Montserrat",
color = pp_blue,
face = "bold"),
plot.subtitle = element_text(size = 15,
family = "Calibri",
color = pp_blue)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank()) +
theme(legend.text = element_text(size=12))
tidy_exchange <- exchange %>%
gather("currency", "value", 2:52)
tidy_exchange$Date <- as.Date(tidy_exchange$Date, '%Y-%m-%d')
tidy_exchange$Date <- format(tidy_exchange$Date, format = "%Y") #problematic line
tidy_exchange = mutate(tidy_exchange, Date=as.integer(Date))
tidy_exchange <- na.omit(tidy_exchange)
grouped_tidy_exchange <- tidy_exchange %>%
group_by(Date, currency, .add = TRUE) %>%
summarise(value = mean(value))
g <- grouped_tidy_exchange %>%
ggplot(aes(x = currency, y = value, frame = Date)) + geom_bar(stat = "identity", color = pp_blue, fill = pp_blue) +
theme_minimal() +
ggtitle("Price of the one dollar", subtitle="1996 - 2018") + xlab("Currency") + ylab("Value in log scale") +
theme(plot.title = element_text(size = 30,
family = "Montserrat",
color = pp_blue,
face = "bold"),
plot.subtitle = element_text(size = 15,
family = "Calibri",
color = pp_blue)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 5)) +
scale_y_continuous(trans = 'log2') +
coord_flip() +
transition_time(Date) +
ease_aes('linear') +
labs(subtitle = 'Year {frame_time}')
animate(g, renderer = gifski_renderer())
tidy_big <- big %>%
gather("year", "value", 5:55)
tidy_big$year <- as.Date(tidy_big$year, 'X%Y..YR%Y.')
tidy_big$year <- format(tidy_big$year, format = "%Y")
tidy_big = mutate(tidy_big, year=as.integer(year))
tidy_big_2018_school <- tidy_big %>%
filter(tidy_big$year == 2018)
tidy_big_2018_school = mutate(tidy_big_2018_school, value=as.integer(value))
tidy_big_2018_school <- na.omit(tidy_big_2018_school)
tidy_big_2018_school <- tidy_big_2018_school %>%
filter(tidy_big_2018_school$Series.Code == "SE.PRM.AGES")
tidy_big_2018_school %>%
ggplot(aes(value)) + geom_bar(width = 1, fill = pp_blue) +
ggtitle("Primary school starting age world distribution", subtitle = "In 2018") +
xlab("Age") + ylab("") +
theme_minimal() +
theme(plot.title = element_text(size = 30,
family = "Montserrat",
color = pp_blue,
face = "bold"),
plot.subtitle = element_text(size = 15,
family = "Calibri",
color = pp_blue))
tidy_big <- big %>%
gather("year", "value", 5:55)
tidy_big <- big %>%
gather("year", "value", 5:55)
tidy_big$year <- as.Date(tidy_big$year, 'X%Y..YR%Y.')
tidy_big$year <- format(tidy_big$year, format = "%Y")
tidy_big = mutate(tidy_big, year=as.integer(year))
tidy_big_2018 <- tidy_big %>%
filter(tidy_big$year == 2018)
tidy_big_2018 = mutate(tidy_big_2018, value=as.integer(value))
tidy_big_2018 <- na.omit(tidy_big_2018)
tidy_big_2018 <- tidy_big_2018 %>%
filter(tidy_big_2018$Series.Code == "SP.POP.TOTL")
tidy_big_2018 <- tidy_big_2018 %>%
arrange(-value)
tidy_big_2018 <- tidy_big_2018 %>%
filter(tidy_big_2018$Country.Code != "HIC" & tidy_big_2018$Country.Code != "LIC")
total = sum(tidy_big_2018$value)
tidy_big_2018 <- tidy_big_2018 %>%
top_n(5)
other = total - sum(tidy_big_2018$value)
other_df = data.frame("other", "", "", "", 2018, other)
names(other_df) <- c("Country.Name", "Country.Code", "Series.Name", "Series.Code", "year", "value")
tidy_big_2018 <- rbind(tidy_big_2018, other_df)
tidy_big_2018$percent <- round(as.double(tidy_big_2018$value/total), 2)
tidy_big_2018 %>%
ggplot(aes(x = "", y = value, fill = Country.Name)) +
geom_bar(width = 1, stat = "identity") +
theme_minimal() +
ggtitle("Population of the world in 2018", subtitle = {paste0('Total: ', total)})+
theme(plot.title = element_text(size = 30,
family = "Montserrat",
color = pp_blue,
face = "bold"),
plot.subtitle = element_text(size = 15,
family = "Calibri",
color = pp_blue)) +
theme(axis.line = element_blank(),
plot.title = element_text(hjust=0.5),
axis.text.x = element_blank(),
axis.text.y = element_blank()) +
labs(fill = "Country.Name",
x=NULL,
y=NULL) +
geom_label(aes(label = percent),
position = position_stack(vjust = 0.5),
show.legend = FALSE) +
scale_fill_brewer(palette="Blues")+
coord_polar(theta = "y", start = 0) +
guides(fill = guide_legend(title = "Country"))
tidy_big <- big %>%
gather("year", "value", 5:55)
tidy_big$year <- as.Date(tidy_big$year, 'X%Y..YR%Y.')
tidy_big$year <- format(tidy_big$year, format = "%Y")
tidy_big = mutate(tidy_big, year=as.integer(year))
tidy_big_2018 <- tidy_big %>%
filter(tidy_big$year == 2018)
tidy_big_2018 = mutate(tidy_big_2018, value=as.integer(value))
tidy_big_2018 <- na.omit(tidy_big_2018)
tidy_big_2018 <- tidy_big_2018 %>%
filter(tidy_big_2018$Series.Code == "SP.POP.TOTL")
tidy_big_2018 <- tidy_big_2018 %>%
arrange(-value)
tidy_big_2018 <- tidy_big_2018 %>%
filter(tidy_big_2018$Country.Code != "HIC" & tidy_big_2018$Country.Code != "LIC")
tidy_big_2018_20 <- tidy_big_2018 %>%
top_n(10)
tidy_big_2018_20 %>%
ggplot(aes(x = Country.Name, y = value)) + geom_bar(stat = "identity", fill = pp_blue) +
ggtitle("Countries by the population", subtitle = "In 2018") + xlab("") + ylab("") +
scale_y_continuous(breaks=seq(0, 1392730000, 250000000), labels = function(x){paste0(x/1000000, 'M')}) +
theme_minimal() +
theme(plot.title = element_text(size = 30,
family = "Montserrat",
color = pp_blue,
face = "bold"),
plot.subtitle = element_text(size = 15,
family = "Calibri",
color = pp_blue),
axis.text.x = element_text(angle=45, vjust=0.6))
tidy_big_2018_20 %>%
ggplot(aes(x = Country.Name, y = value)) + geom_bar(stat = "identity", fill = pp_blue) +
ggtitle("Countries by the population", subtitle = "In 2018") + xlab("") + ylab("") +
scale_y_continuous(breaks=seq(0, 1392730000, 250000000), labels = function(x){paste0(x/1000000, 'M')}) +
theme_minimal() +
theme(plot.title = element_text(size = 30,
family = "Montserrat",
color = pp_blue,
face = "bold"),
plot.subtitle = element_text(size = 15,
family = "Calibri",
color = pp_blue),
axis.text.x = element_text(angle=45, vjust=0.6, size = 15),
axis.text.y = element_text(size = 15))
instal.packages("flexdashboard")
install.packages("flexdashboard")
library(ggplot2)
install.packages("ggsci")
library(flexdashboard)
library(ggsci)
library(plotly)
setwd("D:/Polibuda/Semestr 4/Algorithms & Data Structures/05 Dynamic Programming/Results")
#REPORT 5
bf_data <- read.csv("brute1.csv", header = TRUE, sep = ',')
View(bf_data)
library(dplyr)
library(ggplot2)
library(plotly)
#REPORT 5
bf_data <- read.csv("brute1.csv", header = TRUE, sep = ',')
bf_data %>%
ggplot(aes(x = n, y = time)) + geom_line() + ggtitle("Brute Force") +
theme(legend.text = element_text(size = 14), legend.title = element_text(size = 12)) + theme_gray(base_size = 18)
#REPORT 5
bf_data <- read.csv("brute2.csv", header = TRUE, sep = ',')
bf_data %>%
ggplot(aes(x = n, y = time, color = factor(method))) + geom_line() + ggtitle("Brute Force") +
theme(legend.text = element_text(size = 14), legend.title = element_text(size = 12)) + theme_gray(base_size = 18)
bf_data %>%
ggplot(aes(x = n, y = time, color = factor(method))) + geom_line(size = 2) + ggtitle("Brute Force") +
theme(legend.text = element_text(size = 14), legend.title = element_text(size = 12)) + theme_gray(base_size = 18)
bf_data %>%
ggplot(aes(x = n, y = time, color = factor(method))) + geom_line(size = 1) + ggtitle("Brute Force") +
theme(legend.text = element_text(size = 14), legend.title = element_text(size = 12)) + theme_gray(base_size = 18)
bf_data %>%
ggplot(aes(x = n, y = time, color = factor(method))) + geom_line(size = 1) + ggtitle("Brute Force vs. Greedy Algorithm vs. Dynamic Programming") +
theme(legend.text = element_text(size = 14), legend.title = element_text(size = 12)) + theme_gray(base_size = 18)
gr_dp <- read.csv("gr_dp1.csv", header = TRUE, sep = ',')
View(gr_dp)
gr_dp %>%
filter(capacity = 25000) %>%
ggplot(aes(x = n, y = time, color = factor(method))) + geom_line(size = 1) + ggtitle("Greedy Algorithm vs. Dynamic Programming") +
theme(legend.text = element_text(size = 14), legend.title = element_text(size = 12)) + theme_gray(base_size = 18)
gr_dp <- read.csv("gr_dp1.csv", header = TRUE, sep = ',')
gr_dp %>%
filter(capacity == 25000) %>%
ggplot(aes(x = n, y = time, color = factor(method))) + geom_line(size = 1) + ggtitle("Greedy Algorithm vs. Dynamic Programming") +
theme(legend.text = element_text(size = 14), legend.title = element_text(size = 12)) + theme_gray(base_size = 18)
gr_dp <- read.csv("gr_dp1.csv", header = TRUE, sep = ',')
gr_dp %>%
filter(capacity == 25000) %>%
ggplot(aes(x = n, y = time, color = factor(method))) + geom_line(size = 1) + ggtitle("Greedy Algorithm vs. Dynamic Programming") +
theme(legend.text = element_text(size = 14), legend.title = element_text(size = 12)) + theme_gray(base_size = 18)
#REPORT 5
bf_data <- read.csv("brute2.csv", header = TRUE, sep = ',')
gr_dp <- read.csv("gr_dp1.csv", header = TRUE, sep = ',')
bf_data %>%
ggplot(aes(x = n, y = time, color = factor(method))) + geom_line(size = 1) + ggtitle("Brute Force vs. Greedy Algorithm vs. Dynamic Programming") +
theme(legend.text = element_text(size = 14), legend.title = element_text(size = 12)) + theme_gray(base_size = 18)
gr_dp %>%
filter(capacity == 25000) %>%
ggplot(aes(x = n, y = time, color = factor(method))) + geom_line(size = 1) + ggtitle("Greedy Algorithm vs. Dynamic Programming") +
theme(legend.text = element_text(size = 14), legend.title = element_text(size = 12)) + theme_gray(base_size = 18)
gr_dp %>%
filter(capacity == 25000) %>%
ggplot(aes(x = n, y = time, color = factor(method))) + geom_line(size = 1) + ggtitle("Greedy Algorithm vs. Dynamic Programming") +
theme(legend.text = element_text(size = 14), legend.title = element_text(size = 12)) + theme_gray(base_size = 18)
gr_dp %>%
#filter(capacity == 25000) %>%
ggplot(aes(x = n, y = time, color = factor(method))) + geom_line(size = 1) + ggtitle("Greedy Algorithm vs. Dynamic Programming") +
theme(legend.text = element_text(size = 14), legend.title = element_text(size = 12)) + theme_gray(base_size = 18)
View(gr_dp)
gr_dp %>%
filter(capacity == 25000) %>%
ggplot(aes(x = n, y = time, color = factor(method))) + geom_line() + ggtitle("Greedy Algorithm vs. Dynamic Programming") +
theme(legend.text = element_text(size = 14), legend.title = element_text(size = 12)) + theme_gray(base_size = 18)
