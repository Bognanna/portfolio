--9. Data definition language pt. 1

--Ex.1
-- Create a new table called Projects. Its columns are described below. 
CREATE TABLE projects (
	project_id integer GENERATED BY DEFAULT AS IDENTITY,
	project_name character varying (200),
	description character varying (1000),
	start_date date DEFAULT CURRENT_DATE,
	end_date date,
	budget numeric (10,2);

--Ex.2
-- Define two following projects in a table Projects. Display all information about new projects.
INSERT INTO projects(project_name, description, start_date, end_date, budget)
VALUES (‘New Technologies Survey’, ‘A project aimed at reviewing the area of advanced database technologies’, 2018-01-01, NULL, 1500000);
INSERT INTO projects(project_name, description, start_date, end_date, budget)
VALUES (‘Advanced Data Analysis’, ‘Analyzing data obtainded from various organizations’, 2017-09-20, 2018-10-01, 2750000);
SELECT *
FROM projects;

--Ex.3
-- Try to define third project. Have you succeed? 
INSERT INTO projects(project_id, project_name, description, start_date, end_date, budget)
VALUES (55, ‘Creating backbone network’, ‘Expanding the organization’s network infrastructure.’, 2019-07-01, 2020-05-31, 5000000);

--Ex.4
-- Define a project from 3rd point by skipping value for column project_id. Display names and 
-- identifiers of all projects.
INSERT INTO projects(project_name, description, start_date, end_date, budget)
VALUES (‘Creating backbone network’, ‘Expanding the organization’s network infrastructure.’, 2019-07-01, 2020-05-31, 5000000);
SELECT project_id, project_name
FROM projects
ORDER BY project_id;

--Ex.5
-- Try to change id of project “Creating backbone network” to value 100 (user an UPDATE command). 
-- Have you succeed?
UPDATE projects
SET project_id = 100
WHERE project_name = ‘Creating backobone network’;

--Ex.6
-- Create a new table Projects_Copy. Its structure and data should be equal to table Projects. Use 
-- CREATE … AS SELECT command. Display new table’s data. 
CREATE TABLE projects_copy AS
	SELECT *
	FROM projects;
SELECT *
FROM projects_copy
ORDER BY project_id;

--Ex.7
-- Define new projects in Projects_Copy table. Why does the command work now (confront with 
-- point 3.)? 
INSERT INTO projects_copy(project_id, project_name, description, start_date, end_date, budget)
VALUES (100, ‘Creating mobile network’, ‘Expanding the organization’s network infrastructure – part 2.’, 2020-06-01, 2021-05-31, 4000000);

--Ex.8
-- Delete row from the Projects_Copy table describing project “Creating backbone network” (use 
-- DELETE FROM command). Check if the project still exists in Projects table. 
DELETE FROM projects_copy
WHERE project_name = ‘Creating backbone network’;

SELECT *
FROM projects;


 
--10 Data Definition Language – pt.2

--Ex.2
-- Define following constraints in Projects table: 
ALTER TABLE projects
ADD (  CONSTRAINT pk_projects PRIMARY KEY (project_id),
	CONSTRAINT uk_projects_name UNIQUE (project_name),
            CONSTRAINT chk_projects_end_start_date CHECK (start_date < end_date),
	CONSTRAINT chk_projects_budget CHECK (project_budget > 0 ),
	CONSTRAINT chk_projects_no_of_emp CHECK ( number_of_emloyees >=0 ))
MODIFY project_name NOT NULL,
MODIFY start_date NOT NULL;

--Ex.3
-- Try to define another constraint in Projects table, namely set number_of_employees column as not 
-- null. Did you succeed? Change column values to fulfil constraint, then define constraint once more. 
ALTER TABLE projects
MODIFY number_of_employees NOT NULL;
UPDATE projects
SET number_of_emploees = 0
WHERE name_of_emloees IS NULL:
ALTER TABLE projects
MODIFY number_of_employees NOT NULL;

--Ex.4
-- Add new column to Projects table. This column will show which employee manages the project. 
-- New column name is manager_id, its data type should be the same as data tape of column emp_id 
-- in Employees table. Next define a foreign key on manager_id, which points to emp_id in 
-- Employees. Constraint’s name should be projects_fk_emps. Foreign key should restrict deletion of 
-- employee in Employees table if he or she manages a project. Try to accomplish the task using only 
-- one command. 
ALTER TABLE project
ADD menager_id --data type of column emp_id in Employees
	CONSTRAINT project_fk_emps  REFERENCES employees(dept_id) ON DELETE CASCADE;

--Ex.5
-- Check if foreign key works. Try to set as manager of project “Advanced Data Analysis” a non
-- existent employees. 
UPDATE projects
SET menager_id = 9999
WHERE project_name = ‘Advanced Data Analysis’;

--Ex.6
-- Set Mark Clark as manager of project “Advanced Data Analysis”. Then try to delete Mark Clark 
-- from Employees table. Did you succeed?
UPDATE projects
SET menager_id = 
	(SELECT emp_id 
	FROM employees 
	WHERE name = Mark AND surname = Clark)
WHERE project_name = ‘Advanced Data Analysis’;
DELETE FROM projects
 WHERE name = Mark AND surname = Clark;

--Ex.7
-- Create a new table. Its name is Assignments and its structure is as follows: 
CREATE TABLE assignments (
	project_id INTEGRER 
		NOT NULL
		CONSTRAINT assignments_fk_projects REFERENCES projects (project_id),
	emp_id NUMERIC (4)
		NOT NULL
		CONSTRAINT assigments_fk_empl REFERENCES employees (emp_id),
	function CHARACTER VARYING (100)
		NOT NULL
		CONSTRAINT chk_projects_function CHECK ( function = ‘designer’ OR function 		= ‘programmer’ OR function = ‘tester’),
	start_date DATE DEFAULT CURRENT_DATE
		NOT NULL,
	end_date DATE
		CONSTRAINT chk_projects_end CHECK ( end_date IS NULL 
		OR end_date < start_date),
	salary NUMERIC(8,2)
		NOT NULL
		CONSTRAINT chk_projects_salary CHECK (salary > 0),
	CONSTRAINT pk_assignments PRIMARY KEY (project_id, emp_id, start_date);

--Ex.8
-- Define at least four assignments of different employees to projects. 
INSERT INTO assigments(project_id, emp_id, function, start_date, end_date, salary)
VALUES (10, 210, ‘designer’,NULL , DATE '2021-12-30', 1050.50);
INSERT INTO assigments(project_id, emp_id, function, start_date, end_date, salary)
VALUES (20, 230, ‘tester’,NULL , DATE '2022-01-01', 3000);
INSERT INTO assigments(project_id, emp_id, function, start_date, end_date, salary)
VALUES (30, 210, ‘programmer’,NULL , DATE '2030-01-01', 1250.50);
INSERT INTO assigments(project_id, emp_id, function, start_date, end_date, salary)
VALUES (40, 250, ‘designer’,NULL , DATE '2099-01-01', 1150.50);

--Ex.9
-- Try to define an assignment which will violates the check constraint defined for function column.  
INSERT INTO assigments(project_id, emp_id, function, start_date, end_date, salary)
VALUES (10, 10, ‘none’,NULL , DATE '2018-01-01', 1050.50);

--Ex.10
-- Remove the check constraint defined for function column. Next once again try do define 
-- assignment from task 9.  
ALTER TABLE projects
DROP CONSTRAINT chk_projects_function;
INSERT INTO assigments(project_id, emp_id, function, start_date, end_date, salary)
VALUES (10, 10, ‘none’,NULL , DATE '2018-01-01', 1050.50);