package com.mycompany.market_simulator;

import static java.lang.Math.abs;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.Random;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 * Main window class
 * 
 * @author Bogna
 */
public class MainWindow extends javax.swing.JFrame {

     volatile List<commodity> commodities;
     volatile List<currency> currencies;
     volatile List<company> companies;
     private List<fund> funds;
     private List<investor> investors;
     private List<Thread> player_threads;
     
     private int stock_id = 0;
     private int currency_id = 0;
     private int commodity_id = 0;
     private int fund_id = 0;
     private int investor_id = 0;
     
     private int transactions_per_minute = 5;
     private int bear = 5;
     private int bull = 5;
     
     private String[] names1 = {"Happy", "Sad", "Angry", "Astonished", "Surprised", "Scared"};
     private String[] names2 = {"Market", "Jahrmark", "Shop", "Male", "Supermarket"};
     private String[] names3 = {"Alan", "Bob", "Clark", "Devo", "Eric", "Fin", "George", "Hanna", "Ingrid", "Joanna"}; 
     private String[] countries = {"Poland", "Germany", "France", "Russia", "Ukraine"};
     private String[] cities = {"Anowo", "Benowo", "Cenowo", "Denowo", "Enowo", "Franowo", "Genowo"};
     private String[] streets = {"Abadzka", "Bracka", "Ceradzka", "Doradzka", "Eradzka", "Fracka", "Gracka"};
     
     private Random rnd;
     
     private boolean stopped = false;

    //Create intial markets
    stock_market stock_m = new stock_market("Main Stock Market", "World", "all", "no.", "105a");
    currency_market curr_m = new currency_market("Main Currency Market", "World", "all", "no.", "105b");
    commodity_market com_m = new commodity_market("Main Commodity Market", "World", "all", "no.", "105c");
    
    //Saving the nodes
    private DefaultMutableTreeNode commodity_market_node;
    private DefaultMutableTreeNode currency_market_node;
    private DefaultMutableTreeNode stock_market_node; 
    private DefaultMutableTreeNode fund_node;
    private DefaultMutableTreeNode investor_node;
    
    private DefaultMutableTreeNode player_node_selected_before;
    private boolean player_node_initialized = false;
    
    /**
     * Main window constructor
     */
    public MainWindow() {
        initComponents();
        commodities = new ArrayList<commodity>();
        currencies = new ArrayList<currency>();
        companies = new ArrayList<company>();
        funds = new ArrayList<fund>();
        investors = new ArrayList<investor>();
        player_threads = new ArrayList<Thread>();
        rnd = new Random();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        control_panel = new javax.swing.JPanel();
        market_button = new javax.swing.JButton();
        no_markets = new javax.swing.JLabel();
        index_button = new javax.swing.JButton();
        no_indexes = new javax.swing.JLabel();
        currency_button = new javax.swing.JButton();
        no_currencies = new javax.swing.JLabel();
        commodity_button = new javax.swing.JButton();
        no_commodities = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        transactions_slider = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        bear_bull_slider = new javax.swing.JSlider();
        company_button = new javax.swing.JButton();
        no_companies = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        no_funds = new javax.swing.JLabel();
        no_investors = new javax.swing.JLabel();
        no_transactions = new javax.swing.JLabel();
        bear_label = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        bull_label = new javax.swing.JLabel();
        threads_stop = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        market_tree = new javax.swing.JTree();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        maxLabel = new javax.swing.JLabel();
        currLabel = new javax.swing.JLabel();
        minLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        player_tree = new javax.swing.JTree();
        jPanel3 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        pNameLabel = new javax.swing.JLabel();
        pBudgetLabel = new javax.swing.JLabel();
        forceButton = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        pInterestLabel = new javax.swing.JLabel();

        jScrollPane4.setViewportView(jTree1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Control Panel");

        market_button.setText("Market");
        market_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                market_buttonActionPerformed(evt);
            }
        });

        no_markets.setText("0");

        index_button.setText("Index");
        index_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                index_buttonActionPerformed(evt);
            }
        });

        no_indexes.setText("0");

        currency_button.setText("Currency");
        currency_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currency_buttonActionPerformed(evt);
            }
        });

        no_currencies.setText("0");

        commodity_button.setText("Commodity");
        commodity_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commodity_buttonActionPerformed(evt);
            }
        });

        no_commodities.setText("0");

        jLabel1.setText("Create:");

        jLabel2.setText("Set world parameters:");

        jLabel3.setText("No of transactions per minute:");

        transactions_slider.setMaximum(10);
        transactions_slider.setValue(5);
        transactions_slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                transactions_sliderStateChanged(evt);
            }
        });

        jLabel4.setText("[Bear] : [bull] ratio:");

        bear_bull_slider.setMaximum(10);
        bear_bull_slider.setValue(5);
        bear_bull_slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                bear_bull_sliderStateChanged(evt);
            }
        });

        company_button.setText("Company");
        company_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                company_buttonActionPerformed(evt);
            }
        });

        no_companies.setText("0");

        jLabel6.setText("No_funds:");

        jLabel10.setText("No_investors:");

        no_funds.setText("0");

        no_investors.setText("0");

        no_transactions.setText("5");

        bear_label.setText("5");

        jLabel12.setText(":");

        bull_label.setText("5");

        threads_stop.setText("Stop");
        threads_stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threads_stopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout control_panelLayout = new javax.swing.GroupLayout(control_panel);
        control_panel.setLayout(control_panelLayout);
        control_panelLayout.setHorizontalGroup(
            control_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(control_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(control_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(control_panelLayout.createSequentialGroup()
                        .addGroup(control_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(control_panelLayout.createSequentialGroup()
                                .addGroup(control_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(company_button, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(market_button, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                                    .addComponent(index_button, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                                    .addComponent(currency_button, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                                    .addComponent(commodity_button, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(control_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(no_markets, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(no_indexes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(no_currencies, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(no_commodities, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(no_companies, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(control_panelLayout.createSequentialGroup()
                                .addGroup(control_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(control_panelLayout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(no_transactions, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(control_panelLayout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(44, 44, 44)
                                        .addComponent(bear_label, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bull_label, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
            .addGroup(control_panelLayout.createSequentialGroup()
                .addGroup(control_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(control_panelLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(control_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(bear_bull_slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(transactions_slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(control_panelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(no_funds, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(control_panelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(no_investors, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(control_panelLayout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(threads_stop, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        control_panelLayout.setVerticalGroup(
            control_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(control_panelLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(control_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(market_button)
                    .addComponent(no_markets))
                .addGap(18, 18, 18)
                .addGroup(control_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(index_button)
                    .addComponent(no_indexes))
                .addGap(15, 15, 15)
                .addGroup(control_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currency_button)
                    .addComponent(no_currencies))
                .addGap(18, 18, 18)
                .addGroup(control_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(commodity_button)
                    .addComponent(no_commodities))
                .addGap(18, 18, 18)
                .addGroup(control_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(company_button)
                    .addComponent(no_companies))
                .addGap(3, 3, 3)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(control_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(no_transactions))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(transactions_slider, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(control_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bear_label)
                    .addComponent(jLabel12)
                    .addComponent(bull_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bear_bull_slider, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(control_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(no_funds))
                .addGap(18, 18, 18)
                .addGroup(control_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(no_investors))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(threads_stop)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Market");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Currency Market");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Stock Market");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Commodity Market");
        treeNode1.add(treeNode2);
        market_tree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        market_tree.setToolTipText("");
        market_tree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                market_treeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(market_tree);

        jLabel5.setText("Name:");

        jLabel7.setText("Current price:");

        jLabel8.setText("Max. price:");

        jLabel9.setText("Min. price:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(73, 73, 73))
        );

        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Player");
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Fund");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Investor");
        treeNode1.add(treeNode2);
        player_tree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        player_tree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                player_treeMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(player_tree);

        jLabel11.setText("Budget:");

        jLabel13.setText("Name:");

        forceButton.setText("Force player to change the interest in the asset");
        forceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forceButtonActionPerformed(evt);
            }
        });

        jLabel14.setText("Interested in:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(pInterestLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pBudgetLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                        .addGap(4, 4, 4))
                    .addComponent(forceButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pBudgetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pInterestLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addComponent(forceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(control_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(control_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void set_market_nodes(){
        
        DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode) market_tree.getModel().getRoot();
        Enumeration e = rootNode.children();
        currency_market_node = (DefaultMutableTreeNode) e.nextElement();
        stock_market_node = (DefaultMutableTreeNode) e.nextElement();
        commodity_market_node = (DefaultMutableTreeNode) e.nextElement();
    }
    
    private void set_player_nodes(){
        DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode) player_tree.getModel().getRoot();
        Enumeration e = rootNode.children();
        fund_node = (DefaultMutableTreeNode) e.nextElement();
        investor_node = (DefaultMutableTreeNode) e.nextElement();     
    }
  
    private void update_tree(kapital new_node, DefaultMutableTreeNode parent_node){
        
        DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(new_node.getName());
        parent_node.add(newNode);
        DefaultTreeModel model = (DefaultTreeModel) market_tree.getModel();
        model.reload();
    }
    
    private void update_player_tree(player new_node, DefaultMutableTreeNode parent_node){
        
        DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(new_node.getName());
        parent_node.add(newNode);
        DefaultTreeModel model = (DefaultTreeModel) player_tree.getModel();
        model.reload();
    }
    
    private void update_number_of_players(kapital created_asset){
        no_investors.setText(Integer.toString(Math.min(Integer.parseInt(no_investors.getText())+1, 20)));
        no_funds.setText(Integer.toString(Math.min(Integer.parseInt(no_funds.getText())+1, 10)));
        
        if(Integer.parseInt(no_investors.getText()) > investor_id){
            int id = investor_id;
            float budget = rnd.nextFloat()*10000;
            String name = "0" + String.valueOf(id)+ "_" + names3[abs(rnd.nextInt()%(names3.length))]+"_investor";
            
            investor i = new investor(transactions_per_minute, bear, bull, stopped, id, budget, created_asset, name);

            investors.add(i);
            update_player_tree(i, investor_node);
            investor_id += 1;
            
            Thread i_thread = new Thread(i);
            player_threads.add(i_thread);
            i_thread.start();       
        }
        
        if(Integer.parseInt(no_funds.getText()) > fund_id){
            int id = fund_id;
            float budget = rnd.nextFloat()*100000;
            String first_name = "0" + String.valueOf(id) + "_" + names3[abs(rnd.nextInt()%(names3.length))];
            String last_name = names1[abs(rnd.nextInt()%(names1.length))]+"_fund";
            
            fund f = new fund(transactions_per_minute, bear, bull, stopped, id, budget, created_asset, first_name, last_name);
            
            funds.add(f);
            update_player_tree(f, fund_node);
            fund_id += 1;
            
            Thread f_thread = new Thread(f);
            player_threads.add(f_thread);
            f_thread.start(); 
        }
    }

    private void market_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_market_buttonActionPerformed
        no_markets.setText(Integer.toString(Integer.parseInt(no_markets.getText())+1));
        String r_name = names1[abs(rnd.nextInt()%(names1.length))] + "_" + names2[abs(rnd.nextInt()%(names2.length))] + "_" + rnd.nextInt()%1000;
        String r_country = countries[abs(rnd.nextInt()%(countries.length))];
        String r_city = cities[abs(rnd.nextInt()%(cities.length))];
        String r_address = streets[abs(rnd.nextInt()%streets.length)] + " " + rnd.nextInt()%100;
        market m = new market(r_name, r_country, "idk", r_city, r_address);
    }//GEN-LAST:event_market_buttonActionPerformed

    private void commodity_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commodity_buttonActionPerformed
        no_commodities.setText(Integer.toString(Integer.parseInt(no_commodities.getText())+1));
        String r_name = "0" + commodity_id + "_" + names1[abs(rnd.nextInt()%(names1.length))] + "_commodity";
        float p_min = 0;
        float p_max = rnd.nextFloat()*100;
        float p_curr = p_max;
        commodity c = new commodity(r_name, p_min, p_max, p_curr, commodity_id, "zl");
        com_m.add_to_the_list(c);
        commodities.add(c);
        this.set_market_nodes();
        this.set_player_nodes();
        update_tree(c, commodity_market_node);
        commodity_id += 1;
        update_number_of_players(c);
    }//GEN-LAST:event_commodity_buttonActionPerformed

    private void currency_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currency_buttonActionPerformed
        no_currencies.setText(Integer.toString(Integer.parseInt(no_currencies.getText())+1));
        String r_name = "0" + currency_id + "_" + names1[abs(rnd.nextInt()%(names1.length))] + "_currency";
        float p_min = 0;
        float p_max = rnd.nextFloat()*100;
        float p_curr = p_max;
        currency c = new currency(r_name, p_min, p_max, p_curr, currency_id, 0);
        curr_m.add_to_the_list(c);
        currencies.add(c);
        this.set_market_nodes();
        this.set_player_nodes();
        update_tree(c, currency_market_node);
        currency_id += 1;
        update_number_of_players(c);
    }//GEN-LAST:event_currency_buttonActionPerformed

    private void index_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_index_buttonActionPerformed
        no_indexes.setText(Integer.toString(Integer.parseInt(no_indexes.getText())+1));
        String r_name = names1[abs(rnd.nextInt()%(names1.length))] + "_index_" + rnd.nextInt()%1000;
        index i = new index(r_name);
    }//GEN-LAST:event_index_buttonActionPerformed

    private void company_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_company_buttonActionPerformed
        no_companies.setText(Integer.toString(Integer.parseInt(no_companies.getText())+1));
        String r_name = "0" + stock_id + "_" + names1[abs(rnd.nextInt()%(names1.length))] + "_company";
        float p_min = 0;
        float p_max = rnd.nextFloat()*1000000;
        float p_curr = p_max;
        company c = new company(r_name,p_min, p_max, p_curr, stock_id, "IPO_date", "IPO_share_volume", p_min, p_curr/2, p_min+p_curr, p_max, 0, 0 );
        stock_m.add_to_the_list(c);
        companies.add(c);
        this.set_market_nodes();
        this.set_player_nodes();
        update_tree(c, stock_market_node);
        stock_id += 1;
        update_number_of_players(c);
    }//GEN-LAST:event_company_buttonActionPerformed

    private void market_treeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_market_treeMouseClicked
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) market_tree.getSelectionPath().getLastPathComponent();
        String asset_name = selectedNode.getUserObject().toString();
        String[] parts = asset_name.split("\\_");
        String first_word = parts[0];
        
        char first_char = first_word.charAt(0);
        
        if(first_char == '0'){
            if(parts[2].equals("commodity")){
                nameLabel.setText(commodities.get(Integer.parseInt(parts[0])).getName());
                currLabel.setText(Float.toString(commodities.get(Integer.parseInt(parts[0])).getCurrent_price()));
                minLabel.setText(Float.toString(commodities.get(Integer.parseInt(parts[0])).getMin_price()));
                maxLabel.setText(Float.toString(commodities.get(Integer.parseInt(parts[0])).getMax_price()));
            }else if(parts[2].equals("currency")){
                nameLabel.setText(currencies.get(Integer.parseInt(parts[0])).getName());
                currLabel.setText(Float.toString(currencies.get(Integer.parseInt(parts[0])).getCurrent_price()));
                minLabel.setText(Float.toString(currencies.get(Integer.parseInt(parts[0])).getMin_price()));
                maxLabel.setText(Float.toString(currencies.get(Integer.parseInt(parts[0])).getMax_price()));
            }else if(parts[2].equals("company")){
                nameLabel.setText(companies.get(Integer.parseInt(parts[0])).getName());
                currLabel.setText(Float.toString(companies.get(Integer.parseInt(parts[0])).getCurrent_price()));
                minLabel.setText(Float.toString(companies.get(Integer.parseInt(parts[0])).getMin_price()));
                maxLabel.setText(Float.toString(companies.get(Integer.parseInt(parts[0])).getMax_price()));
            }
        }else{
            nameLabel.setText(asset_name);
        }
        
    }//GEN-LAST:event_market_treeMouseClicked

    private void transactions_sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_transactions_sliderStateChanged
        transactions_per_minute = transactions_slider.getValue(); 
        no_transactions.setText(Integer.toString(transactions_per_minute));
        for(investor i : investors){
            i.update_trans_per_m(transactions_per_minute);
        }
        
        for(fund f : funds){
            f.update_trans_per_m(transactions_per_minute);
        }
        
        //System.out.println(transactions_per_minute);
    }//GEN-LAST:event_transactions_sliderStateChanged

    private void bear_bull_sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_bear_bull_sliderStateChanged
        bull = bear_bull_slider.getValue();
        bear = 10 - bull;
        
        bull_label.setText(Integer.toString(bull));
        bear_label.setText(Integer.toString(bear));
        
        for(investor i : investors){
            i.update_bear_bull_ratio(bull);
        }
        
        for(fund f : funds){
            f.update_bear_bull_ratio(bull);
        }
    }//GEN-LAST:event_bear_bull_sliderStateChanged

    private void player_treeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_player_treeMouseClicked
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) player_tree.getSelectionPath().getLastPathComponent();
        String player_name = selectedNode.getUserObject().toString();
        String[] parts = player_name.split("\\_");
        String first_word = parts[0];
        
        char first_char = first_word.charAt(0);
        
        if(first_char == '0'){
            //System.out.println(parts[2]);
            if(parts[2].equals("fund")){
                pNameLabel.setText(funds.get(Integer.parseInt(parts[0])).getName());
                pBudgetLabel.setText(Float.toString(funds.get(Integer.parseInt(parts[0])).getBudget()));
                pInterestLabel.setText(funds.get(Integer.parseInt(parts[0])).getAssetName());
            }else if(parts[2].equals("investor")){
                pNameLabel.setText(investors.get(Integer.parseInt(parts[0])).getName());
                pBudgetLabel.setText(Float.toString(investors.get(Integer.parseInt(parts[0])).getBudget()));
                pInterestLabel.setText(investors.get(Integer.parseInt(parts[0])).getAssetName());
            }
        }else{
            pNameLabel.setText(player_name);
        }
        
        player_node_selected_before = selectedNode;
        player_node_initialized = true;
    }//GEN-LAST:event_player_treeMouseClicked

    private void threads_stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threads_stopActionPerformed

        stopped = !stopped;    
        
        for(fund f : funds){
            f.update_stop(stopped);
        }

        for(investor i : investors){
            i.update_stop(stopped);
        }
    }//GEN-LAST:event_threads_stopActionPerformed

    private void forceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forceButtonActionPerformed
        if(player_node_initialized){

            String player_name = player_node_selected_before.getUserObject().toString();
            String[] parts = player_name.split("\\_");
            String first_word = parts[0];
            char first_char = first_word.charAt(0);

            kapital new_asset ;
            boolean asset_initialized = false;
            int which_type_of_asset = abs(rnd.nextInt()%3);
            int which_asset;

            if(which_type_of_asset == 0 && commodities.size() > 0){
                which_asset = abs(rnd.nextInt()%commodities.size());
                new_asset = commodities.get(which_asset);
                asset_initialized = true;
            }else if(which_type_of_asset == 1 && currencies.size() > 0){
                which_asset = abs(rnd.nextInt()%currencies.size());
                new_asset = currencies.get(which_asset);
                asset_initialized = true;
            }else if(companies.size() > 0){
                which_asset = abs(rnd.nextInt()%companies.size());
                new_asset = companies.get(which_asset);
                asset_initialized = true;
            }else{
                throw new Error("");
            }

            if(first_char == '0' && asset_initialized){
                if(parts[2].equals("fund")){
                    funds.get(Integer.parseInt(parts[0])).update_observed_asset(new_asset);
                    pInterestLabel.setText(funds.get(Integer.parseInt(parts[0])).getAssetName());

                }else if(parts[2].equals("investor")){
                    investors.get(Integer.parseInt(parts[0])).update_observed_asset(new_asset);
                    pInterestLabel.setText(investors.get(Integer.parseInt(parts[0])).getAssetName());
                }
            }

        }
    }//GEN-LAST:event_forceButtonActionPerformed

    /**
     * Main
     * @param args 
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
       
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            /**
             * Run the main window
             */
            public void run() {
                new MainWindow().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider bear_bull_slider;
    private javax.swing.JLabel bear_label;
    private javax.swing.JLabel bull_label;
    private javax.swing.JButton commodity_button;
    private javax.swing.JButton company_button;
    private javax.swing.JPanel control_panel;
    private javax.swing.JLabel currLabel;
    private javax.swing.JButton currency_button;
    private javax.swing.JButton forceButton;
    private javax.swing.JButton index_button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTree jTree1;
    private javax.swing.JButton market_button;
    private javax.swing.JTree market_tree;
    private javax.swing.JLabel maxLabel;
    private javax.swing.JLabel minLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel no_commodities;
    private javax.swing.JLabel no_companies;
    private javax.swing.JLabel no_currencies;
    private javax.swing.JLabel no_funds;
    private javax.swing.JLabel no_indexes;
    private javax.swing.JLabel no_investors;
    private javax.swing.JLabel no_markets;
    private javax.swing.JLabel no_transactions;
    private javax.swing.JLabel pBudgetLabel;
    private javax.swing.JLabel pInterestLabel;
    private javax.swing.JLabel pNameLabel;
    private javax.swing.JTree player_tree;
    private javax.swing.JToggleButton threads_stop;
    private javax.swing.JSlider transactions_slider;
    // End of variables declaration//GEN-END:variables
}
